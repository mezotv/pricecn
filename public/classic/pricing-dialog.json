{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "classic/pricing-dialog",
  "type": "registry:component",
  "title": "Pricing Dialog",
  "description": "A pricing dialog component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "dialog"
  ],
  "files": [
    {
      "path": "registry/classic/pricing-dialog.tsx",
      "content": "import { cn } from \"@/lib/utils\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogFooter,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ArrowRight } from \"lucide-react\";\r\nimport type {\r\n  InformationProps,\r\n  PriceItemProps,\r\n  PricingDialogProps,\r\n  PricingDialogTitleProps,\r\n  QuantityProps,\r\n  PricingDialogFooterProps,\r\n  TotalPriceProps,\r\n} from \"@/types/pricing/pricing-dialog\";\r\nimport { forwardRef } from \"react\";\r\n\r\nexport const PricingDialog = ({\r\n  open,\r\n  setOpen,\r\n  children,\r\n  className,\r\n}: PricingDialogProps) => {\r\n  return (\r\n    <Dialog open={open} onOpenChange={setOpen}>\r\n      <DialogContent\r\n        className={cn(\r\n          className,\r\n          \"p-0 rounded-lg text-foreground gap-0 text-sm shadow-inner\"\r\n        )}\r\n      >\r\n        {children}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport const PricingDialogTitle = ({\r\n  children,\r\n  className,\r\n}: PricingDialogTitleProps) => {\r\n  return (\r\n    <DialogTitle className={cn(className, \"font-bold text-xl px-6 pt-4 pb-2\")}>\r\n      {children}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nexport const Information = ({ children, className }: InformationProps) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        className,\r\n        \"text-foreground px-6 pb-3 text-sm whitespace-pre-line\"\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PriceItem = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}: PriceItemProps & React.HTMLAttributes<HTMLDivElement>) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex flex-col text-muted-foreground pb-4 sm:pb-0 gap-1 sm:flex-row justify-between px-6 sm:h-7 sm:gap-2 sm:items-center  sm:whitespace-nowrap \",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const QuantityInput = ({\r\n  children,\r\n  onChange,\r\n  value,\r\n  className,\r\n  ...props\r\n}: QuantityProps & React.HTMLAttributes<HTMLDivElement>) => {\r\n  const currentValue = Number(value) || 0;\r\n\r\n  const handleValueChange = (newValue: number) => {\r\n    const syntheticEvent = {\r\n      target: { value: String(newValue) },\r\n    } as React.ChangeEvent<HTMLInputElement>;\r\n    onChange(syntheticEvent);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(className, \"flex flex-row items-center gap-4\")}\r\n      {...props}\r\n    >\r\n      <div className=\"flex items-center gap-1\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() =>\r\n            currentValue > 0 && handleValueChange(currentValue - 1)\r\n          }\r\n          disabled={currentValue <= 0}\r\n          className=\"h-6 w-6 pb-0.5\"\r\n        >\r\n          -\r\n        </Button>\r\n        <span className=\"w-8 text-center text-foreground\">{currentValue}</span>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() => handleValueChange(currentValue + 1)}\r\n          className=\"h-6 w-6 pb-0.5\"\r\n        >\r\n          +\r\n        </Button>\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PricingDialogFooter = ({\r\n  children,\r\n  className,\r\n}: PricingDialogFooterProps) => {\r\n  return (\r\n    <DialogFooter\r\n      className={cn(\r\n        className,\r\n        \"flex flex-col sm:flex-row justify-between py-3 px-4 bg-stone-100 dark:bg-zinc-900 rounded-b-lg mt-4 border-t\"\r\n      )}\r\n    >\r\n      {children}\r\n    </DialogFooter>\r\n  );\r\n};\r\n\r\nexport const TotalPrice = ({ children, className }: TotalPriceProps) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        className,\r\n        \"px-2 w-full mb-4 sm:mb-0 font-semibold flex justify-between items-center\"\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PricingDialogButton = forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<typeof Button>\r\n>(({ children, onClick, className, ...props }, ref) => {\r\n  return (\r\n    <Button\r\n      onClick={onClick}\r\n      {...props}\r\n      ref={ref}\r\n      className={cn(className, \"shadow-xs shadow-stone-400\")}\r\n    >\r\n      {children}\r\n      <ArrowRight className=\"h-3!\" />\r\n    </Button>\r\n  );\r\n});\r\nPricingDialogButton.displayName = \"PricingDialogButton\";\r\n",
      "type": "registry:component",
      "target": "components/pricing/pricing-dialog.tsx"
    },
    {
      "path": "types/pricing/pricing-dialog.ts",
      "content": "interface BaseComponentProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport interface PricingDialogProps extends BaseComponentProps {\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n}\r\n\r\nexport interface PricingDialogTitleProps extends BaseComponentProps {}\r\n\r\nexport interface InformationProps extends BaseComponentProps {}\r\n\r\nexport interface PriceItemProps extends BaseComponentProps {}\r\n\r\nexport interface QuantityProps extends BaseComponentProps {\r\n  value: string | number;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport interface PricingDialogFooterProps extends BaseComponentProps {}\r\n\r\nexport interface TotalPriceProps extends BaseComponentProps {}",
      "type": "registry:lib",
      "target": "types/pricing/pricing-dialog.ts"
    }
  ]
}