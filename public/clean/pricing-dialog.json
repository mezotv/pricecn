{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clean/pricing-dialog",
  "type": "registry:component",
  "title": "Pricing Dialog",
  "description": "A pricing dialog component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "dialog"
  ],
  "files": [
    {
      "path": "registry/clean/pricing-dialog.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\nimport React from \"react\";\n\nexport const PricingDialog = ({\n  open,\n  setOpen,\n  children,\n  className,\n}: {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent className={cn(className, \"p-0 rounded-sm gap-0 text-sm\")}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport const PricingDialogTitle = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <DialogTitle\n      className={cn(className, \"font-medium text-sm uppercase px-6 pt-4 pb-2\")}\n    >\n      {children}\n    </DialogTitle>\n  );\n};\n\nexport const Information = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        className,\n        \"text-foreground px-6 pb-2 text-sm whitespace-pre-line\"\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const PriceItem = ({\n  children,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col sm:flex-row text-muted-foreground pb-4 sm:pb-0 gap-1 justify-between px-6 sm:h-7 sm:gap-2 sm:items-center  sm:whitespace-nowrap \",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const QuantityInput = ({\n  children,\n  onChange,\n  value,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  value: string | number;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const currentValue = Number(value) || 0;\n\n  const handleValueChange = (newValue: number) => {\n    const syntheticEvent = {\n      target: { value: String(newValue) },\n    } as React.ChangeEvent<HTMLInputElement>;\n    onChange(syntheticEvent);\n  };\n\n  return (\n    <div className={cn(className, \"flex items-center gap-4\")} {...props}>\n      <div className=\"flex items-center gap-1\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() =>\n            currentValue > 0 && handleValueChange(currentValue - 1)\n          }\n          disabled={currentValue <= 0}\n          className=\"h-6 w-6 pb-0.5\"\n        >\n          -\n        </Button>\n        <span className=\"w-8 text-center\">{currentValue}</span>\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() => handleValueChange(currentValue + 1)}\n          className=\"h-6 w-6 pb-0.5\"\n        >\n          +\n        </Button>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport const PricingDialogFooter = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <DialogFooter\n      className={cn(\n        className,\n        \"flex flex-col sm:flex-row justify-between py-3 px-4 mt-2\"\n      )}\n    >\n      {children}\n    </DialogFooter>\n  );\n};\n\nexport const TotalPrice = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"px-2 w-full mb-4 sm:mb-0 font-medium text-lg flex justify-between items-center\">\n      {children}\n    </div>\n  );\n};\n\nexport const PricingDialogButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ children, onClick, disabled, size, className, ...props }, ref) => {\n  return (\n    <Button\n      onClick={onClick}\n      disabled={disabled}\n      size={size}\n      ref={ref}\n      className={cn(className, \"\")}\n      {...props}\n    >\n      {children}\n      <ArrowRight className=\"!h-3\" />\n    </Button>\n  );\n});\nPricingDialogButton.displayName = \"PricingDialogButton\";\n",
      "type": "registry:component",
      "target": "components/pricing/pricing-dialog.tsx"
    }
  ]
}