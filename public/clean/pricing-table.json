{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clean/pricing-table",
  "type": "registry:component",
  "title": "Pricing Table",
  "description": "A pricing table component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "switch"
  ],
  "files": [
    {
      "path": "registry/clean/pricing-table.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { createContext, useContext, useState } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Check, Loader2 } from \"lucide-react\";\r\nimport type {\r\n  AnnualSwitchProps,\r\n  PricingCardButtonProps,\r\n  PricingCardProps,\r\n  PricingFeatureListProps,\r\n  PricingTableContextProps,\r\n  PricingTableProps,\r\n  RecommendedBadgeProps,\r\n} from \"@/types/pricing/pricing-table\";\r\n\r\nconst PricingTableContext = createContext<PricingTableContextProps>({\r\n  isAnnual: false,\r\n  setIsAnnual: () => {},\r\n  products: [],\r\n  showFeatures: true,\r\n  uniform: false,\r\n});\r\n\r\nexport const usePricingTableContext = (componentName: string) => {\r\n  const context = useContext(PricingTableContext);\r\n\r\n  if (context === undefined) {\r\n    throw new Error(`${componentName} must be used within <PricingTable />`);\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nexport const PricingTable = ({\r\n  children,\r\n  products,\r\n  showFeatures = true,\r\n  className,\r\n  uniform = false,\r\n}: PricingTableProps) => {\r\n  const [isAnnual, setIsAnnual] = useState(false);\r\n\r\n  if (!products) {\r\n    throw new Error(\"Product is required in <PricingTable />\");\r\n  }\r\n\r\n  return (\r\n    <PricingTableContext.Provider\r\n      value={{ isAnnual, setIsAnnual, products, showFeatures, uniform }}\r\n    >\r\n      <div className={cn(\"flex items-center flex-col\")}>\r\n        {products.some((p) => p.priceAnnual) && (\r\n          <div\r\n            className={cn(\r\n              products.some((p) => p.recommendedText) && !uniform && \"mb-8\"\r\n            )}\r\n          >\r\n            <AnnualSwitch isAnnual={isAnnual} setIsAnnual={setIsAnnual} />\r\n          </div>\r\n        )}\r\n        <div\r\n          className={cn(\r\n            \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-none lg:auto-cols-[minmax(200px,1fr)] lg:grid-flow-col gap-4 w-full\",\r\n            className\r\n          )}\r\n        >\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </PricingTableContext.Provider>\r\n  );\r\n};\r\n\r\nexport const PricingCard = ({\r\n  productId,\r\n  className,\r\n  onButtonClick,\r\n  buttonProps,\r\n}: PricingCardProps) => {\r\n  const { isAnnual, products, showFeatures, uniform } =\r\n    usePricingTableContext(\"PricingCard\");\r\n  const product = products.find((p) => p.id === productId);\r\n\r\n  if (!product) {\r\n    throw new Error(`Product with id ${productId} not found`);\r\n  }\r\n\r\n  const {\r\n    name,\r\n    price,\r\n    priceAnnual,\r\n    recommendedText,\r\n    buttonText,\r\n    items,\r\n    description,\r\n    buttonUrl,\r\n    everythingFrom,\r\n  } = product;\r\n\r\n  const isRecommended = recommendedText ? true : false;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"border rounded-md bg-background w-full h-full pt-6 text-foreground\",\r\n        recommendedText &&\r\n          !uniform &&\r\n          \"shadow-xl border-primary/30 lg:-translate-y-6 lg:h-[calc(100%+48px)] relative\",\r\n        className\r\n      )}\r\n    >\r\n      {recommendedText && !uniform && (\r\n        <RecommendedBadge recommended={recommendedText} />\r\n      )}\r\n      <div\r\n        className={cn(\r\n          \"px-6\",\r\n          recommendedText && !uniform && \"lg:translate-y-6\"\r\n        )}\r\n      >\r\n        <div className=\"flex flex-col gap-2 \">\r\n          <h2 className=\"text-sm font-medium uppercase\">{name}</h2>\r\n          {description && (\r\n            <span className=\"text-sm h-14 line-clamp-3\">{description}</span>\r\n          )}\r\n          <div className=\"flex flex-col\">\r\n            <h3 className=\"font-semibold flex items-center text-3xl mb-1 \">\r\n              {isAnnual && priceAnnual\r\n                ? priceAnnual?.primaryText\r\n                : price.primaryText}{\" \"}\r\n            </h3>\r\n\r\n            {price.secondaryText && (\r\n              <span className=\"font-normal text-muted-foreground text-sm pb-4 h-10 line-clamp-2\">\r\n                {isAnnual && priceAnnual\r\n                  ? priceAnnual?.secondaryText\r\n                  : price.secondaryText}\r\n              </span>\r\n            )}\r\n          </div>\r\n          <div className={cn(\" mb-6 \")}>\r\n            <PricingCardButton\r\n              recommended={isRecommended}\r\n              buttonUrl={buttonUrl}\r\n              onClick={onButtonClick}\r\n              {...buttonProps}\r\n            >\r\n              {buttonText}\r\n            </PricingCardButton>\r\n          </div>\r\n        </div>\r\n        {showFeatures && items.length > 0 && (\r\n          <div className=\"grow\">\r\n            <PricingFeatureList\r\n              items={items}\r\n              showIcon={true}\r\n              everythingFrom={everythingFrom}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PricingFeatureList = ({\r\n  items,\r\n  showIcon = true,\r\n  everythingFrom,\r\n  className,\r\n  translations = {\r\n    everythingFromPlus: \"Everything from ${everythingFrom}, plus:\",\r\n  }\r\n}: PricingFeatureListProps) => {\r\n  return (\r\n    <div className={cn(\"pb-6 grow\", className)}>\r\n      {everythingFrom && (\r\n        <p className=\"text-sm mb-4\">{translations.everythingFromPlus?.replace(\r\n          /\\$\\{everythingFrom\\}/g,\r\n          everythingFrom\r\n        )}</p>\r\n      )}\r\n      <div className=\"space-y-3\">\r\n        {items.map((item, index) => (\r\n          <div key={index} className=\"flex items-start gap-2 text-sm\">\r\n            {showIcon && (\r\n              <Check className=\"h-4 w-4 text-primary shrink-0 mt-0.5\" />\r\n            )}\r\n            <div className=\"flex flex-col\">\r\n              <span>{item.primaryText}</span>\r\n              {item.secondaryText && (\r\n                <span className=\"text-sm text-muted-foreground\">\r\n                  {item.secondaryText}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PricingCardButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  PricingCardButtonProps\r\n>(({ recommended, children, buttonUrl, onClick, className, ...props }, ref) => {\r\n  const [loading, setLoading] = useState(false);\r\n  return (\r\n    <Button\r\n      className={cn(\r\n        \"w-full py-3 px-4 rounded-md group overflow-hidden relative transition-all duration-300 hover:brightness-90\",\r\n        className\r\n      )}\r\n      variant={recommended ? \"default\" : \"secondary\"}\r\n      ref={ref}\r\n      disabled={loading}\r\n      onClick={async (e) => {\r\n        if (buttonUrl) {\r\n          window.open(buttonUrl, \"_blank\");\r\n          return;\r\n        }\r\n\r\n        if (onClick) {\r\n          setLoading(true);\r\n          await onClick(e);\r\n          setLoading(false);\r\n        }\r\n      }}\r\n      {...props}\r\n    >\r\n      {loading ? (\r\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n      ) : (\r\n        <>\r\n          {\" \"}\r\n          <div className=\"flex items-center justify-between w-full transition-transform duration-300 group-hover:translate-y-[-130%]\">\r\n            <span>{children}</span>\r\n            <span className=\"text-sm\">→</span>\r\n          </div>\r\n          <div className=\"flex items-center justify-between w-full absolute px-4 translate-y-[130%] transition-transform duration-300 group-hover:translate-y-0 mt-2 group-hover:mt-0\">\r\n            <span>{children}</span>\r\n            <span className=\"text-sm\">→</span>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Button>\r\n  );\r\n});\r\nPricingCardButton.displayName = \"PricingCardButton\";\r\n\r\nexport const AnnualSwitch = ({\r\n  isAnnual,\r\n  setIsAnnual,\r\n  translations = {\r\n    monthly: \"Monthly\",\r\n    annual: \"Annual\",\r\n  },\r\n}: AnnualSwitchProps) => {\r\n  return (\r\n    <div className=\"flex items-center space-x-2 mb-4\">\r\n      <span className=\"text-sm text-muted-foreground\">\r\n        {translations.monthly}\r\n      </span>\r\n      <Switch\r\n        id=\"annual-billing\"\r\n        checked={isAnnual}\r\n        onCheckedChange={setIsAnnual}\r\n      />\r\n      <span className=\"text-sm text-muted-foreground\">\r\n        {translations.annual}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const RecommendedBadge = ({ recommended }: RecommendedBadgeProps) => {\r\n  return (\r\n    <div className=\"bg-primary absolute w-fit border text-primary-foreground flex items-center justify-center text-xs uppercase font-medium lg:rounded-full px-3 py-0.5 lg:top-3 lg:right-3 -top-px -right-px rounded-bl-md\">\r\n      {recommended}\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": "components/pricing/pricing-table.tsx"
    },
    {
      "path": "types/pricing/pricing-table.ts",
      "content": "import { Product } from \"../product\";\r\n\r\nexport interface PricingTableContextProps {\r\n    isAnnual: boolean;\r\n    setIsAnnual: (isAnnual: boolean) => void;\r\n    products: Product[];\r\n    showFeatures: boolean;\r\n    uniform: boolean;\r\n}\r\n\r\nexport interface PricingTableProps {\r\n  children?: React.ReactNode;\r\n  products?: Product[];\r\n  showFeatures?: boolean;\r\n  className?: string;\r\n  uniform?: boolean;\r\n}\r\n\r\nexport interface PricingCardProps {\r\n  productId: string;\r\n  className?: string;\r\n  onButtonClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  buttonProps?: React.ComponentProps<\"button\">;\r\n}\r\n\r\nexport interface PricingItem {\r\n  primaryText: string;\r\n  secondaryText?: string;\r\n}\r\n\r\nexport interface PricingFeatureListProps {\r\n  items: PricingItem[];\r\n  showIcon?: boolean;\r\n  everythingFrom?: string;\r\n  className?: string;\r\n  translations?: {\r\n    everythingFromPlus?: string;\r\n  };\r\n}\r\n\r\nexport interface PricingCardButtonProps extends React.ComponentProps<\"button\"> {\r\n  recommended?: boolean;\r\n  buttonUrl?: string;\r\n}\r\n\r\nexport interface AnnualSwitchProps {\r\n  isAnnual: boolean;\r\n  setIsAnnual: (isAnnual: boolean) => void;\r\n  translations?: {\r\n    monthly: string;\r\n    annual: string;\r\n  };\r\n}\r\n\r\nexport interface RecommendedBadgeProps {\r\n  recommended: string;\r\n}\r\n",
      "type": "registry:lib",
      "target": "types/pricing/pricing-table.ts"
    },
    {
      "path": "registry/clean/example.tsx",
      "content": "\"use client\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { PricingCard, PricingTable } from \"./pricing-table\";\r\nimport { products } from \"@/lib/util/constant\";\r\n\r\nexport const PricingTableExample = () => {\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={() => document.documentElement.classList.toggle(\"dark\")}\r\n        className=\"p-2 mb-4 rounded-lg text-zinc-600 dark:text-zinc-300 \r\n        bg-zinc-100 dark:bg-zinc-800 hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors\"\r\n      >\r\n        Toggle theme\r\n      </Button>\r\n      <PricingTable products={products.products} showFeatures={true}>\r\n        <PricingCard productId=\"hobby\" />\r\n        <PricingCard productId=\"professional\" />\r\n        <PricingCard productId=\"enterprise\" />\r\n      </PricingTable>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:block",
      "target": "components/pricing/example.tsx"
    }
  ]
}