{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "classic/pricing-table",
  "type": "registry:component",
  "title": "Pricing Table",
  "description": "A pricing table component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "switch"
  ],
  "files": [
    {
      "path": "registry/classic/pricing-table.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { createContext, useContext, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, Loader2 } from \"lucide-react\";\nimport type { Product } from \"@/types/product\";\n\nconst PricingTableContext = createContext<{\n  isAnnual: boolean;\n  setIsAnnual: (isAnnual: boolean) => void;\n  products: Product[];\n  showFeatures: boolean;\n  uniform: boolean;\n}>({\n  isAnnual: false,\n  setIsAnnual: () => {},\n  products: [],\n  showFeatures: true,\n  uniform: false,\n});\n\nexport const usePricingTableContext = (componentName: string) => {\n  const context = useContext(PricingTableContext);\n\n  if (context === undefined) {\n    throw new Error(`${componentName} must be used within <PricingTable />`);\n  }\n\n  return context;\n};\n\nexport const PricingTable = ({\n  children,\n  products,\n  showFeatures = true,\n  className,\n  uniform = false,\n}: {\n  children?: React.ReactNode;\n  products?: Product[];\n  showFeatures?: boolean;\n  className?: string;\n  uniform?: boolean;\n}) => {\n  const [isAnnual, setIsAnnual] = useState(false);\n\n  if (!products) {\n    throw new Error(\"products is required in <PricingTable />\");\n  }\n\n  if (products.length === 0) {\n    return <></>;\n  }\n  const hasEvenProducts = products.length % 2 === 0;\n\n  return (\n    <PricingTableContext.Provider\n      value={{ isAnnual, setIsAnnual, products, showFeatures, uniform }}\n    >\n      <div className={cn(\"flex items-center flex-col\")}>\n        {products.some((p) => p.priceAnnual) && (\n          <div\n            className={cn(\n              products.some((p) => p.recommendedText) && !uniform && \"mb-8\"\n            )}\n          >\n            <AnnualSwitch isAnnual={isAnnual} setIsAnnual={setIsAnnual} />\n          </div>\n        )}\n        <div\n          className={cn(\n            \"w-full grid grid-cols-1 lg:grid-cols-none lg:auto-cols-[minmax(200px,1fr)] lg:grid-flow-col bg-background rounded-xl border overflow-hidden lg:overflow-visible dark:shadow-zinc-800 shadow-inner \",\n            hasEvenProducts && \"sm:grid-cols-2\",\n            className\n          )}\n        >\n          {children}\n        </div>\n      </div>\n    </PricingTableContext.Provider>\n  );\n};\n\ninterface PricingCardProps {\n  productId: string;\n  showFeatures?: boolean;\n  className?: string;\n  onButtonClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  buttonProps?: React.ComponentProps<\"button\">;\n}\n\nexport const PricingCard = ({\n  productId,\n  className,\n  onButtonClick,\n  buttonProps,\n}: PricingCardProps) => {\n  const { isAnnual, products, showFeatures, uniform } =\n    usePricingTableContext(\"PricingCard\");\n\n  const product = products.find((p) => p.id === productId);\n\n  if (!product) {\n    throw new Error(`Product with id ${productId} not found`);\n  }\n\n  const {\n    name,\n    price,\n    priceAnnual,\n    recommendedText,\n    buttonText,\n    items,\n    description,\n    buttonUrl,\n    everythingFrom,\n  } = product;\n\n  const isRecommended = recommendedText ? true : false;\n\n  return (\n    <div\n      className={cn(\n        \"w-full h-full py-6 text-foreground border-l border-t lg:border-t-0 lg:first:border-l-0 lg:ml-0 ml-[-1px] -mt-[1px]\",\n        isRecommended &&\n          !uniform &&\n          \"lg:border-none lg:outline lg:outline-1 lg:outline-border lg:-translate-y-6 lg:rounded-xl lg:shadow-lg lg:shadow-zinc-200 lg:dark:shadow-zinc-800/80 lg:h-[calc(100%+48px)] bg-stone-100 dark:bg-zinc-900 relative dark:outline-zinc-700\",\n        className\n      )}\n    >\n      {recommendedText && !uniform && (\n        <RecommendedBadge recommended={recommendedText} />\n      )}\n      <div\n        className={cn(\n          \"flex flex-col h-full flex-grow\",\n          isRecommended && !uniform && \"lg:translate-y-6\"\n        )}\n      >\n        <div className=\"h-full\">\n          <div className=\"flex flex-col gap-2\">\n            <h2 className=\"text-2xl font-bold px-6 \">{name}</h2>\n            {description && (\n              <div className=\"text-sm text-muted-foreground px-6 h-8\">\n                <p className=\"line-clamp-2\">{description}</p>\n              </div>\n            )}\n            <div className=\"mt-2 mb-6\">\n              <h3 className=\"font-semibold h-16 border-y flex items-center px-6\">\n                <div className=\"line-clamp-2\">\n                  {isAnnual && priceAnnual\n                    ? priceAnnual?.primaryText\n                    : price.primaryText}{\" \"}\n                  {price.secondaryText && (\n                    <span className=\"font-normal text-muted-foreground mt-1\">\n                      {isAnnual && priceAnnual\n                        ? priceAnnual?.secondaryText\n                        : price.secondaryText}\n                    </span>\n                  )}\n                </div>\n              </h3>\n            </div>\n          </div>\n          {showFeatures && items.length > 0 && (\n            <div className=\"flex-grow px-6 mb-6\">\n              <PricingFeatureList\n                items={items}\n                showIcon={true}\n                everythingFrom={everythingFrom}\n              />\n            </div>\n          )}\n        </div>\n        <div\n          className={cn(\n            \" px-6 \",\n            isRecommended && !uniform && \"lg:-translate-y-12\"\n          )}\n        >\n          <PricingCardButton\n            recommended={recommendedText ? true : false}\n            onClick={onButtonClick}\n            buttonUrl={buttonUrl}\n            {...buttonProps}\n          >\n            {buttonText}\n          </PricingCardButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Pricing Feature List\nexport const PricingFeatureList = ({\n  items,\n  showIcon = true,\n  everythingFrom,\n  className,\n}: {\n  items: {\n    primaryText: string;\n    secondaryText?: string;\n  }[];\n  showIcon?: boolean;\n  everythingFrom?: string;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(\"flex-grow\", className)}>\n      {everythingFrom && (\n        <p className=\"text-sm mb-4\">Everything from {everythingFrom}, plus:</p>\n      )}\n      <div className=\"space-y-3\">\n        {items.map((item, index) => (\n          <div key={index} className=\"flex items-start gap-2 text-sm\">\n            {showIcon && (\n              <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\n            )}\n            <div className=\"flex flex-col\">\n              <span>{item.primaryText}</span>\n              {item.secondaryText && (\n                <span className=\"text-sm text-muted-foreground\">\n                  {item.secondaryText}\n                </span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Pricing Card Button\nexport interface PricingCardButtonProps extends React.ComponentProps<\"button\"> {\n  recommended?: boolean;\n  buttonUrl?: string;\n}\n\nexport const PricingCardButton = React.forwardRef<\n  HTMLButtonElement,\n  PricingCardButtonProps\n>(({ recommended, children, buttonUrl, onClick, className, ...props }, ref) => {\n  const [loading, setLoading] = useState(false);\n  return (\n    <Button\n      className={cn(\n        \"w-full py-3 px-4 group overflow-hidden relative transition-all duration-300 hover:brightness-90 border rounded-lg\",\n        className\n      )}\n      variant={recommended ? \"default\" : \"secondary\"}\n      ref={ref}\n      disabled={loading}\n      onClick={async (e) => {\n        setLoading(true);\n        try {\n          if (onClick) {\n            await onClick(e);\n\n            return;\n          }\n\n          if (buttonUrl) {\n            window.open(buttonUrl, \"_blank\");\n            return;\n          }\n        } catch (error) {\n          throw error;\n        } finally {\n          setLoading(false);\n        }\n      }}\n      {...props}\n    >\n      {loading ? (\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\n      ) : (\n        <>\n          <div className=\"flex items-center justify-between w-full transition-transform duration-300 group-hover:translate-y-[-130%]\">\n            <span>{children}</span>\n            <span className=\"text-sm\">→</span>\n          </div>\n          <div className=\"flex items-center justify-between w-full absolute px-4 translate-y-[130%] transition-transform duration-300 group-hover:translate-y-0 mt-2 group-hover:mt-0\">\n            <span>{children}</span>\n            <span className=\"text-sm\">→</span>\n          </div>\n        </>\n      )}\n    </Button>\n  );\n});\nPricingCardButton.displayName = \"PricingCardButton\";\n\n// Annual Switch\nexport const AnnualSwitch = ({\n  isAnnual,\n  setIsAnnual,\n}: {\n  isAnnual: boolean;\n  setIsAnnual: (isAnnual: boolean) => void;\n}) => {\n  return (\n    <div className=\"flex items-center space-x-2 mb-4\">\n      <span className=\"text-sm text-muted-foreground\">Monthly</span>\n      <Switch\n        id=\"annual-billing\"\n        checked={isAnnual}\n        onCheckedChange={setIsAnnual}\n      />\n      <span className=\"text-sm text-muted-foreground\">Annual</span>\n    </div>\n  );\n};\n\nexport const RecommendedBadge = ({ recommended }: { recommended: string }) => {\n  return (\n    <div className=\"bg-secondary absolute border text-muted-foreground text-sm font-medium lg:rounded-full px-3 lg:py-0.5 lg:top-4 lg:right-4 top-[-1px] right-[-1px] rounded-bl-lg\">\n      {recommended}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/pricing/pricing-table.tsx"
    },
    {
      "path": "registry/classic/example.tsx",
      "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { PricingCard, PricingTable } from \"./pricing-table\";\nimport type { Product } from \"@/types/product\";\n\nexport const products: Product[] = [\n  {\n    id: \"hobby\",\n    name: \"Hobby\",\n    description: \"For personal projects and small-scale applications.\",\n    price: { primaryText: \"Free\", secondaryText: \"up to 3 users\" },\n    buttonText: \"Start deploying\",\n    items: [\n      {\n        primaryText: \"Deploy full-stack apps in minutes\",\n      },\n      {\n        primaryText: \"Fully-managed datastores\",\n      },\n      {\n        primaryText: \"Custom domains\",\n      },\n      {\n        primaryText: \"Global CDN & regional hosting\",\n      },\n      {\n        primaryText: \"Get security out of the box\",\n      },\n      {\n        primaryText: \"Email support\",\n      },\n    ],\n  },\n  {\n    id: \"professional\",\n    name: \"Pro\",\n    description: \"For teams building production applications.\",\n    recommendedText: \"Best Value\",\n    price: {\n      primaryText: \"$19\",\n      secondaryText: \"per user/month plus compute costs*\",\n    },\n    priceAnnual: {\n      primaryText: \"$190\",\n      secondaryText: \"per user/year plus compute costs*\",\n    },\n    buttonText: \"Select plan\",\n    everythingFrom: \"Hobby\",\n    items: [\n      {\n        primaryText: \"10 team members included\",\n        secondaryText: \"Then $20 per member\",\n      },\n      {\n        primaryText: \"500 GB of bandwidth included\",\n      },\n      {\n        primaryText: \"Unlimited projects & environments\",\n      },\n      {\n        primaryText: \"Horizontal autoscaling\",\n      },\n      {\n        primaryText: \"Test with preview environments\",\n      },\n      {\n        primaryText: \"Isolated environments\",\n      },\n    ],\n  },\n  {\n    id: \"enterprise\",\n    name: \"Enterprise\",\n    description: \"For mission critical applications with complex needs.\",\n    price: { primaryText: \"Custom\", secondaryText: \"pricing for your team\" },\n    buttonText: \"Get in touch\",\n    everythingFrom: \"Organization\",\n    items: [\n      {\n        primaryText: \"Centralized team management\",\n      },\n      {\n        primaryText: \"Guest users\",\n      },\n      {\n        primaryText: \"SAML SSO & SCIM\",\n      },\n      {\n        primaryText: \"Guaranteed uptime\",\n      },\n      {\n        primaryText: \"Premium support\",\n      },\n      {\n        primaryText: \"Customer success\",\n      },\n    ],\n  },\n];\n\nexport const PricingTableExample = () => {\n  return (\n    <div>\n      <Button\n        onClick={() => document.documentElement.classList.toggle(\"dark\")}\n        className=\"p-2 mb-4 rounded-lg text-zinc-600 dark:text-zinc-300 \n        bg-zinc-100 dark:bg-zinc-800 hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors\"\n      >\n        Toggle theme\n      </Button>\n      <PricingTable products={products} showFeatures={true}>\n        <PricingCard productId=\"hobby\" />\n        <PricingCard productId=\"professional\" />\n        <PricingCard productId=\"enterprise\" />\n      </PricingTable>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/pricing/example.tsx"
    }
  ]
}